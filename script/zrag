#!/bin/bash

# Z-RAG 服务管理脚本
# 用于启动、停止、重启和查看状态

# 获取脚本所在目录
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# 获取项目根目录
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"

# 配置变量
APP_NAME="zrag"
MAIN_CLASS="com.unionhole.zrag.ZRagApplication"
LIB_DIR="$PROJECT_DIR/lib"
PID_FILE="$PROJECT_DIR/logs/zrag.pid"
LOG_FILE="$PROJECT_DIR/logs/zrag.log"
CONFIG_DIR="$PROJECT_DIR/config"
JAVA_OPTS="-Xms512m -Xmx2g -Dspring.profiles.active=prod -Dspring.config.location=classpath:/application.yml,file:$CONFIG_DIR/"

# 颜色输出
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# 日志函数
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# 检查Java环境
check_java() {
    if ! command -v java &> /dev/null; then
        log_error "Java is not installed or not in PATH"
        exit 1
    fi
    
    # 获取Java版本信息
    JAVA_VERSION_STRING=$(java -version 2>&1 | head -n 1)
    log_info "Java version: $JAVA_VERSION_STRING"
    
    # 提取主版本号
    if echo "$JAVA_VERSION_STRING" | grep -q "version \"1\."; then
        # Java 8及以下版本格式: "1.8.0_xxx"
        JAVA_VERSION=$(echo "$JAVA_VERSION_STRING" | cut -d'"' -f2 | cut -d'.' -f2)
    else
        # Java 9及以上版本格式: "11.0.x" 或 "17.0.x"
        JAVA_VERSION=$(echo "$JAVA_VERSION_STRING" | cut -d'"' -f2 | cut -d'.' -f1)
    fi
    
    # 检查版本是否大于等于8
    if [ "$JAVA_VERSION" -lt 8 ]; then
        log_error "Java 8 or higher is required, found version: $JAVA_VERSION"
        exit 1
    fi
    
    log_info "Java version check passed: $JAVA_VERSION"
}

# 检查必要文件
check_files() {
    if [ ! -d "$LIB_DIR" ]; then
        log_error "Lib directory not found: $LIB_DIR"
        exit 1
    fi
    
    # 检查主JAR文件
    MAIN_JAR=$(find "$LIB_DIR" -name "ZRAG-*.jar" | head -n 1)
    if [ -z "$MAIN_JAR" ]; then
        log_error "Main JAR file not found in: $LIB_DIR"
        exit 1
    fi
    
    if [ ! -d "$CONFIG_DIR" ]; then
        log_error "Config directory not found: $CONFIG_DIR"
        exit 1
    fi
    
    # 创建必要的目录
    mkdir -p "$PROJECT_DIR/logs"
    mkdir -p "$PROJECT_DIR/data"
    mkdir -p "$PROJECT_DIR/temp"
}

# 获取进程ID
get_pid() {
    if [ -f "$PID_FILE" ]; then
        cat "$PID_FILE"
    else
        echo ""
    fi
}

# 检查进程是否运行
is_running() {
    local pid=$(get_pid)
    if [ -n "$pid" ] && kill -0 "$pid" 2>/dev/null; then
        return 0
    else
        return 1
    fi
}

# 启动服务
start() {
    if is_running; then
        log_warn "$APP_NAME is already running (PID: $(get_pid))"
        return 0
    fi
    
    log_info "Starting $APP_NAME..."
    
    check_java
    check_files
    
    # 构建classpath
    CLASSPATH="$LIB_DIR/*"
    
    # 启动应用
    nohup java $JAVA_OPTS -cp "$CLASSPATH" "$MAIN_CLASS" > "$LOG_FILE" 2>&1 &
    local pid=$!
    
    # 保存PID
    echo $pid > "$PID_FILE"
    
    # 等待启动
    sleep 3
    
    if is_running; then
        log_info "$APP_NAME started successfully (PID: $pid)"
        log_info "Log file: $LOG_FILE"
        log_info "Config directory: $CONFIG_DIR"
    else
        log_error "Failed to start $APP_NAME"
        rm -f "$PID_FILE"
        exit 1
    fi
}

# 停止服务
stop() {
    if ! is_running; then
        log_warn "$APP_NAME is not running"
        return 0
    fi
    
    local pid=$(get_pid)
    log_info "Stopping $APP_NAME (PID: $pid)..."
    
    # 优雅停止
    kill "$pid"
    
    # 等待进程结束
    local count=0
    while is_running && [ $count -lt 30 ]; do
        sleep 1
        count=$((count + 1))
    done
    
    if is_running; then
        log_warn "Graceful shutdown failed, forcing kill..."
        kill -9 "$pid"
        sleep 2
    fi
    
    if ! is_running; then
        log_info "$APP_NAME stopped successfully"
        rm -f "$PID_FILE"
    else
        log_error "Failed to stop $APP_NAME"
        exit 1
    fi
}

# 重启服务
restart() {
    log_info "Restarting $APP_NAME..."
    stop
    sleep 2
    start
}

# 查看状态
status() {
    if is_running; then
        local pid=$(get_pid)
        log_info "$APP_NAME is running (PID: $pid)"
        
        # 显示内存使用情况
        if command -v ps &> /dev/null; then
            local mem_usage=$(ps -p "$pid" -o rss= 2>/dev/null | awk '{print $1/1024 " MB"}')
            if [ -n "$mem_usage" ]; then
                log_info "Memory usage: $mem_usage"
            fi
        fi
        
        # 显示端口信息
        if command -v netstat &> /dev/null; then
            local port=$(netstat -tlnp 2>/dev/null | grep ":$pid " | awk '{print $4}' | cut -d: -f2)
            if [ -n "$port" ]; then
                log_info "Listening on port: $port"
            fi
        fi
    else
        log_info "$APP_NAME is not running"
    fi
}

# 查看日志
logs() {
    if [ -f "$LOG_FILE" ]; then
        tail -f "$LOG_FILE"
    else
        log_error "Log file not found: $LOG_FILE"
        exit 1
    fi
}

# 显示帮助
usage() {
    echo "Usage: $0 {start|stop|restart|status|logs}"
    echo ""
    echo "Commands:"
    echo "  start   - Start the $APP_NAME service"
    echo "  stop    - Stop the $APP_NAME service"
    echo "  restart - Restart the $APP_NAME service"
    echo "  status  - Show the $APP_NAME service status"
    echo "  logs    - Show the $APP_NAME service logs"
    echo ""
    echo "Configuration:"
    echo "  Main class: $MAIN_CLASS"
    echo "  Lib dir:    $LIB_DIR"
    echo "  Config:     $CONFIG_DIR"
    echo "  Logs:       $LOG_FILE"
    echo "  PID file:   $PID_FILE"
}

# 主逻辑
case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    status)
        status
        ;;
    logs)
        logs
        ;;
    *)
        usage
        exit 1
        ;;
esac

exit 0
